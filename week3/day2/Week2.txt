What Selenium?

Selenium is a suite of tools and libraries designed for automated testing of web applications. 
It provides a way for developers and testers to simulate user interactions with a web browser and automate 
various tasks, such as filling out forms, clicking buttons, navigating through pages, and verifying 
the behavior of web applications.


Why Selenium?

*The reason Selenium is so popular is because it's open-source, which means it's free to use and has a 
large community of users contributing to its development.
*This tool supports multiple programming languages like Java, Python, and C#, allowing a wide range 
of developers to use it.
*Additionally, Selenium can work with various browsers such as Chrome, Firefox, and Safari, making 
it versatile.

When to use Selenium?

*Selenium is ideal for testing web applications.
*If you have a website or a web application that needs to be tested across different browsers 
and operating systems, Selenium is a great choice.
*It's especially useful for regression testing, where you need to repeatedly test the same application
 following changes or updates.


To Open DOM:

1. Right Click on webpage -> click on inspect
2. press f12 or fn+f12
3. more tools-> click on Developers tool or ctrl+shift+i



 Selenium interaction:
1)How Communication Happens?

Selenium automations are performed using the WebDriver, which is an interface that sends commands to a browser and retrieves results.
The process is streamlined through WebDriver's ability to communicate across various browsers using the same script in a chosen programming language.

2)Why Selenium Communicates with Webpage Through HTML Document-DOM?

Understanding the Document Object Model (DOM), which is the logical structure of HTML documents, allows Selenium to interact with various elements on a webpage.
By communicating through the DOM, Selenium can simulate user actions like clicking and typing in a way that mirrors real user behavior.

3)What is DOM?

The DOM is a representation of a browser’s current web document.
It's a hierarchical tree of objects that enables scripts to dynamically access and update the content, structure, and style of documents.
Understanding the DOM is crucial for locating elements to interact with during testing.

4)Understanding HTML Structure and Tags

The HTML structure is composed of various tags like <html>, <a>, <button>, <div>, <iframe>, <img>, <input>, <option>, <select>, <span>, and <table>.
Each tag has a specific purpose, such as defining hyperlinks, sections in a document, or input fields. Knowing these tags helps in identifying elements for Selenium to interact with.

5)To Locate Element in DOM

Different locators such as id, name, className, linkText, partialLinkText, xpath are used to find elements in the DOM.
Each locator has a specific use case, for example, id is used when the element has a unique identifier, while xpath are used when elements are dynamic or duplicate name, class, or ID.
How to Use Locators?

6)Locators are used with the Syntax:
`driver.findElement(By.locator("value"))` 
For instance, By.id("login") would locate an element with the ID of 'login'.

7)When to/Not to Use Locators

Guidelines are provided on when to use specific locators.
For example, 
id should be used when it's available,
name if id does not exist,
linkText for links,
className when the class attribute is unique,
tagName for collections,
xpath if no other locator works.



Xpath:
XML Path
Xpath-XML Path


Absolute XPath: It starts from the root (html) and traverses down to the desired element, 
detailing every single element in the hierarchy. The path starts with a single forward slash /, 
indicating the root. For example: /html/body/div[2]/div[2]/div/form/p[1]/input. `.
 ex: /html/body/div[2]/div[2]/div/form/p/input
ex: /html/body/div[2]/div[2]/div/form/p/input





Relative XPath: It starts from anywhere within the document and typically focuses on 
identifying elements based on attributes, indexes, or specific tags, not necessarily 
detailing the entire path from the root. It starts with a double forward slash //,
 indicating the search can begin anywhere. For example: //input[@id=‘username’].



Relative Xpath:

a.Basic xpath
Attribute based xPath: Syntax: //tagname[@attributename='attributeValue'] 
Example:  //input[@id='password'] //input[@id='twotabsearchtextbox']
//input[@class='decorativeSubmit']
//input[@id='inputValEnter']
//input[@id='username']


Text based xPath: Syntax: //tagname[text()='textvalue'] 
Example:  //a[text()='Leads'] 
//span[text()='Hello, sign in']


Partial Attribute based xpath: Syntax: //tagname[contains(@attributename,'partialattributevalue')] 
Example: //input[contains(@class,'decorative')] 
//input[contains(@id,'twotab')]
 //input[contains(@id,'search')]
 //input[contains(@id,'firstName')]

Partial Text based xpath:
Syntax: //tagname[contains(text(),'partialtextvalue')]
  Example: //a[contains(text(),'SFA')]
          //span[contains(text(),'Hello')]
          //a[contains(text(),'Smartphones')]
          //a[contains(text(),'CRM/SFA')]
          //span[contains(text(),'Here’s')]

Index based xpath:
 Syntax: (//tagname[@attributename='attributeValue'])[2]
(//tagname[text()='textvalue'])[3] Example: (//a[contains(text(),'Lead')])[3] 

(//tagname[@attr='attr value'])[4]
*you should not  go beyond index as 5*
(//span[contains(text(),'Fashion')])[2]
(//span[contains(text(),'Here’s')])[3]
(//input[@class='inputBox'])[5]









Advance Xpath:

Parent to Child

           Basic Xpath parent / tagname of child
Ex: //p[@class='top']/input
    //div[@class='col-xs-14 search-box-wrapper']/input
    //a[@class='nav-a nav-hasArrow']/span

    //div[@id='username_container']/input

GrandParent to GrandChild:
Basic Xpath for Gp//tagname of Gc
ex:    (//form[@id='login']//input)[2]
   //form[@id='login']//input[@id='password']

   //div[@id='theloginform']//input
   //div[@id='theloginform']//input[@id='password']

Child to Parent:

Basic Xpath Child/parent::tagname of parent
//input[@id='inputValEnter']/parent::div
//input[@id='email']/parent::div
//input[@id='Login']/parent::form

GrandChild to GrandParent :
Basic xpath for GC/::ancestortagname of GP
//input[@class='decorativeSubmit']/ancestor::form
//a[text()='Best Sellers']/ancestor::div[@id='nav-xshop-container']




1:https://www.snapdeal.com/
   cart -xpath
   footwear- xpath

 2.https://www.amazon.in/
 Today's Deals 


 Elder sibling to youngerSibling:

 Basic xpath Elder sibling/following-sibling::tagname Ys
 //label[text()='Username']/following-sibling::input

 Younger sibling to Elder sibling:
 Basic xpath Younger sibling/preceding-sibling::tagname of Es
 //input[@id='username']/preceding-sibling::label

 Elder cousin to younger cousin:
 Basic xpat Elder Cousin/following::tagname of Yc
 //input[@id='Login']/following::input

 Younger cousin to Elder Cousin:
 Basic xpath Younger cousin /preceding::tagname of EC
 //input[@id='rememberUn']/preceding::input[@id='Login']







 Wait:
  Java wait -Thread.sleep(2000); it will wait till time given to be completed

  Selenium wait :
  1.Implicit wait
  2.Explicit wait

  Implicit wait :
  10mins

  at 7mins
  its common for both findElement and findElements

  